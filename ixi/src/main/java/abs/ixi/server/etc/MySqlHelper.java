package abs.ixi.server.etc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MySqlHelper {
	private static final Logger LOGGER = LoggerFactory.getLogger(MySqlHelper.class);

	public static PreparedStatement createPreparedStatement(Connection con, String sql, Object... param)
			throws Exception {
		LOGGER.debug("Creating prepared statemnet for sql {} and paramenters {}.", sql, param);

		try {

			PreparedStatement ps = con.prepareStatement(sql);

			if (param != null) {
				for (int i = 0; i < param.length; i++) {
					ps.setObject((i + 1), param[i]);
				}
			}

			return ps;

		} catch (Exception e) {
			LOGGER.error("Error while creating prepared statement for sql : {} and paramenters : {}", sql, param, e);
			throw new DatabaseException("Failed to create prepared statement", e);
		}

	}

	public static PreparedStatement createPreparedStatement(Connection con, String sql, int autoGeneratedKey,
			Object... param) throws Exception {
		LOGGER.debug("Creating prepared statemnet for sql {} and paramenters {}.", sql, param);

		try {

			PreparedStatement ps = con.prepareStatement(sql, autoGeneratedKey);

			if (param != null) {
				for (int i = 0; i < param.length; i++) {
					ps.setObject((i + 1), param[i]);
				}
			}

			return ps;

		} catch (Exception e) {
			LOGGER.error("Error while creating prepared statement for sql : {} and paramenters : {}", sql, param, e);
			throw new DatabaseException("Failed to create prepared statement", e);
		}

	}

	public static void closeConnection(Connection con) {
		LOGGER.debug("Closing database connection...");

		try {

			con.close();

		} catch (Exception e) {
			LOGGER.warn("Failed to close database connection", e);
		}

	}

	public static void closeConnection(Connection con, PreparedStatement ps) {
		LOGGER.debug("Closing database connection...");

		try {

			ps.close();
			con.close();

		} catch (Exception e) {
			LOGGER.warn("Failed to close database connection", e);
		}

	}

	public static void closeConnection(Connection con, PreparedStatement ps, ResultSet rs) {
		LOGGER.debug("Closing database connection...");
		try {

			rs.close();
			ps.close();
			con.close();

		} catch (Exception e) {
			LOGGER.warn("Failed to close database connection", e);
		}
	}

	public static String prepareLikeClause(String str, MatchType match) {
		switch (match) {
		case PREMATCH:
			return '%' + str;
		case POSTMATCH:
			return str + '%';
		case BOTH:
			return '%' + str + '%';
		}

		LOGGER.warn("The Match type argument supplied was not valid. Assuming MatchType.BOTH");

		return '%' + str + '%';
	}

	public enum MatchType {
		PREMATCH, POSTMATCH, BOTH
	}
}
